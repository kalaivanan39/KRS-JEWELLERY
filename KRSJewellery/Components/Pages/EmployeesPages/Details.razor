@page "/employees/details"
@using Microsoft.EntityFrameworkCore
@using KRSJewellery.Models
@inject IDbContextFactory<KRSJewellery.Data.MyAppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Employees</h2>
    <hr />
    @if (employees is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">EMPNAME</dt>
            <dd class="col-sm-10">@employees.EMPNAME</dd>
            <dt class="col-sm-2">PLACE</dt>
            <dd class="col-sm-10">@employees.PLACE</dd>
            <dt class="col-sm-2">CONTACT</dt>
            <dd class="col-sm-10">@employees.CONTACT</dd>
            <dt class="col-sm-2">EMAIL</dt>
            <dd class="col-sm-10">@employees.EMAIL</dd>
            <dt class="col-sm-2">SALARY</dt>
            <dd class="col-sm-10">@employees.SALARY</dd>
        </dl>
        <div>
            <a href="@($"/employees/edit?empid={employees.EMPID}")" class="btn btn-success">Edit</a> |
            <a href="@($"/employees")" class="btn btn-dark">Back to List</a>
        </div>
    }
</div>

@code {
    private Employees? employees;

    [SupplyParameterFromQuery]
    private int EMPID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employees = await context.Employees.FirstOrDefaultAsync(m => m.EMPID == EMPID);

        if (employees is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
